pipeline {
    agent { node { label 'linux && jdk11' } }
    environment {
        AWS_ACCESS_KEY_ID = credentials('aws_access_key_id_k8s')
        AWS_SECRET_ACCESS_KEY = credentials('aws_secret_access_key_k8s')
        AWS_DEFAULT_REGION = credentials('aws_default_region')
        DOCKER_REPOSITORY = credentials('aws_docker_repository ')
        KUBECONFIG_QA = credentials('aws_kubernetes_config_qa')
        KUBECONFIG_PRD = credentials('aws_kubernetes_config_prd')
        SONAR_USER = credentials('sonar-admin-user')
        SONAR_URL = credentials('sonar-url')
        NEXUS_BASE_URL = credentials('nexus_base_url')
        NEXUS_USER = credentials('nexus_user')
        NEXUS_PASS = credentials('nexus_pass')
    }
    options {
        timeout(time: 1, unit: 'HOURS')
    }
    stages {
        stage('intelipost-devops-tools') {
            steps {
                checkout([
                    $class: 'GitSCM',
                    branches: [[name: '*/master']],
                    doGenerateSubmoduleConfigurations: false,
                    extensions: [[$class: 'RelativeTargetDirectory',
                    relativeTargetDir: 'intelipost-devops']],
                    submoduleCfg: [],
                    userRemoteConfigs: [[credentialsId: 'devops-intelipost', url: 'https://github.com/intelipost/intelipost-devops.git']]
                ])
            }
        }
        stage('Tagging') {
            steps {
                sh 'bash -x intelipost-devops/pipeline-shared-librares/tagging.sh'
            }
        }
        stage("SonnarQube Scan") {
            steps {
                sh 'mvn clean verify sonar:sonar -Dsonar.host.url=$SONAR_URL -Dsonar.login=$SONAR_USER -Dsonar.scm.disabled=true'
            }
        }

        stage('Build Application') {
            steps {
                sh 'bash -x intelipost-devops/pipeline-shared-librares/build-package.sh'
            }
        }
        stage('Build & Push Image to ECR') {
            steps {
                sh 'bash -x intelipost-devops/pipeline-shared-librares/docker.sh -r $DOCKER_REPOSITORY -d ecr'
            }
        }
        stage('Upload Artifact') {
            steps {
                sh 'bash -x intelipost-devops/pipeline-shared-librares/nexus-upload.sh'
            }
        }
        stage('Deploy QA') {
            steps {
                sh 'bash -x intelipost-devops/pipeline-shared-librares/deploy.sh -r $AWS_DEFAULT_REGION -e qa -i deploy -d k8s'
                sh 'bash -x intelipost-devops/pipeline-shared-librares/check_upstart_app.sh -u $URL_APP/actuator/health -s 200 -t 120 -c 5 -e qa'
            }
        }
        stage('Deploy PRD') {
            steps {
                sh 'bash -x intelipost-devops/pipeline-shared-librares/deploy.sh -r $AWS_DEFAULT_REGION -e prd -i deploy -d k8s'
                sh 'bash -x intelipost-devops/pipeline-shared-librares/check_upstart_app.sh -u $URL_APP/actuator/health -s 200 -t 120 -c 5 -e prd'
            }
        }
    }
}

